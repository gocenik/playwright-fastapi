import  logging
from  fastapi  import  FastAPI
from  pydantic  import  BaseModel
import  asyncio
from  playwright.async_api  import  async_playwright
from  fastapi  import  APIRouter
from  fastapi.responses  import  JSONResponse
from  pydantic  import  EmailStr

#  Set  up  logging
logging.basicConfig(level=logging.DEBUG)

router  =  APIRouter()

class  LoginInfo(BaseModel):
     username:  str
     password:  str
     url:  str

@router.post("/run_system_info_reader/")
async  def  run_playwright(login_info:  LoginInfo):
     #  Validate  username
     if  not  login_info.username:
         return  JSONResponse(status_code=400,  content={"error":  "Username  is  required"})
     if  not  re.match("^[A-Za-z0-9]{6,}$",  login_info.username):
         return  JSONResponse(status_code=400,  content={"error":  "Username  must  be  at  least  6  characters  and  contain  only  alphanumeric  characters"})

     #  Validate  password
     if  not  login_info.password:
         return  JSONResponse(status_code=400,  content={"error":  "Password  is  required"})
     if  not  re.match("^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)[A-Za-z\d]{8,}$",  login_info.password):
         return  JSONResponse(status_code=400,  content={"error":  "Password  must  be  at  least  8  characters  and  contain  a  combination  of  uppercase  letters,  lowercase  letters,  and  numbers"})

     #  Validate  url
     if  not  login_info.url:
         return  JSONResponse(status_code=400,  content={"error":  "URL  is  required"})
     if  not  validators.url(login_info.url):
         return  JSONResponse(status_code=400,  content={"error":  "Invalid  URL"})

      try:
          async  with  async_playwright()  as  p:
             browser  =  await  p.chromium.launch()
             page  =  await  browser.new_page()
              await  page.goto(login_info.url)

             #  Check  if  the  specific  fields  are  visible
             if  await  page.is_visible("input[name=\"c_UserId\"]"):
                 #  Fill  in  the  first  form  if  present
                  await  page.fill("input[name=\"c_UserId\"]",  login_info.username)
                  await  page.fill("input[name=\"c_Password\"]",  login_info.password)
                  await  page.fill("input[name=\"c_PasswordReEnter\"]",  login_info.password)
                  await  page.click("text=Apply")
                 #  Wait  for  the  page  to  reload
                  await  page.wait_for_load_state("networkidle")

             #  Fill  in  the  login  form
              await  page.fill("input[name=\"loginUsername\"]",  login_info.username)
              await  page.fill("input[name=\"loginPassword\"]",  login_info.password)
              await  page.click("text=Login")
             #  Wait  for  the  page  to  load  after  login
              await  page.wait_for_load_state("networkidle")

             #  Navigate  to  the  system  info  page
              await  page.goto(f"{login_info.url}/UbeeSysInfo.asp")
             #  Fetch  system  info

             #  model  =  await  page.text_content('table:nth-child(1)  tr:nth-child(3)  >  td:nth-child(2)')
             hardware_version  =  await  page.text_content('table:nth-child(1)  tr:nth-child(4)  >  td:nth-child(2)')
             firmware_version  =  await  page.text_content('tr:nth-child(5)  >  td:nth-child(2)')
             boot_version  =  await  page.text_content('tr:nth-child(6)  >  td:
